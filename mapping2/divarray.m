function [i1,i2] = divarray(pos,inpoly)%Function [i1,i2] = divarray(Pos,InPoly)%  Finds the indices of an input position array (Pos) for locations%  inside (i1) and outside (i2) of a polygon that the user graph-%  ically inputs on a map. Pos = [Lon,Lat]. First the user is pre-%  sented with a map for the domain of Pos, a cross-hair appears,%  and the users clicks on the vertices of a polygon that encloses%  the desired subdomain. The last point need not coincide with the%  first point because the program automatically closes the polygon %  between the first and the last points input. Red dashed lines will %  trace the evolving polygon while clicking.  After clicking at the %  last vertex, click RETURN. The user will then be presented with a %  new map in which the two subdomains are filled with distinct colors, %  for verification. %%  If an optional [Lon,Lat] polygon (InPoly) is input, the domain indices%  (i1,i2) will be output on that basis instead of manually.%%  Uses GINPUT, INPOLYGON, and a coastline file named WORLD50.MAT.%  If if the user has a different coastline file, he/she should%  modify the first line of code ('load...') accordingly. If no   %  coastline file is available, comment out all of the first section. % Section 1: Plot coastlineload world50, cstX = world50(:,1); cstY = world50(:,2);%set pos to 0-360 conventionpos(pos(:,1)<=0,1) = pos(pos(:,1)<=0,1) + 360;v = [floor(min(pos(:,1)))-5,ceil(max(pos(:,1)))+5,...	floor(min(pos(:,2)))-5,ceil(max(pos(:,2)))+5];cstX(cstX<=0) = cstX(cstX<=0) + 360;  % convert negative longitudes (if exist)if v(2)>360     % if locations go to Lon > 360	cstX(cstX>0 & cstX<=v(2)-360) = cstX(cstX>0 & cstX<=v(2)-360) + 360; endplot(cstX,cstY,'.-k'), hold on; % Section 2: Plot data locationszx = pos(:,1); zy = pos(:,2);plot(zx,zy,'ob');  % Plot the data locationsset(gca,'xlim',[v(1),v(2)],'ylim',[v(3),v(4)])if nargin > 1	wx = inpoly(:,1)'; wy = inpoly(:,2)';else% Section 3: Input the polygonfor k = 1:1000	[xx,yy,button] = ginput(1);     % Input polygon vertices	if (isempty(xx)==1 | button==13 | xx<v(1))break, else wx(k)=xx;wy(k)=yy; end	if k == 1		plot(wx(k),wy(k),'.r','markersize',10) 	else 		plot([wx(k-1),wx(k)],[wy(k-1),wy(k)],'--r',wx(k),wy(k),'.r','markersize',10),	endendplot([wx(k-1),wx(1)],[wy(k-1),wy(1)],'--r')end% Section 4: Find the IN/OUT subsetswx = [wx' ; wx(1)];          % Complete the polygonwy = [wy' ; wy(1)];IN = inpolygon(zx,zy,wx,wy); % Find locations inside the polygonplot(zx(IN),zy(IN),'or',zx(~IN),zy(~IN),'ob');i1 = find(IN == 1); i2 = find(IN == 0);return