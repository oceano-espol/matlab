function [lat,lon,dist]=gcirc(p1,p2,spd,rate)%Function [lat,lon,dist]=GCIRC(p1,p2,spd,rate)%  Finds the latitude and longitude of points taken at RATE(#/day) along  %  the great circle route of a ship traveling between two ports (p1,p2) at %  the the speed SPD(knots), where p = [lat,lon]. The great circle%  distance DIST(p1==>p2) along the route is also returned (n.mi.).%%  The algorithm uses a rotation matrix R2R1 to transform the polar coor-%  dinate system (lat,lon) so that p1 lies at the pole of the transformed%  system. Applying R2R1 to p2 puts it on a meridian of the new system%  such that its colatitude is now the distance between p1 & p2. The new%  points are laid off from p1 along the arc of the meridian and reverse-%  transformed to the original system by the inverse matrix I1I2. Cartesian%  to polar conversions are applied in both systems as needed. %%  Written by D.B. Enfield, October, 1991%  NOAA/Atlantic Oceanographic & Meteorological Laboratory%  Miami, FL 33149 (305-361-4351); enfield@aoml.noaa.gov% Initializationsfac = pi/180; dlat = (fac*24*spd/rate)/60;dlat=.72*dlat;p1  = fac*p1; p2   = fac*p2;la1 = p1(1);  la2  = p2(1);lo1=p1(2);lo2=p2(2);% Transform to new systemx2 = [cos(la2)*cos(lo2),cos(la2)*sin(lo2),sin(la2)]'; % Cartesians of p2R2R1=zeros(3,3);            % Preallocate rotation matrixI1I2=zeros(3,3);            % Preallocate Inverse rotation matrixR2R1(1,:) = [sin(la1)*cos(lo1),sin(la1)*sin(lo1),-cos(la1)];R2R1(2,:) = [-sin(lo1),cos(lo1),0];R2R1(3,:) = [cos(la1)*cos(lo1),cos(la1)*sin(lo1),sin(la1)];xx2=R2R1*x2;                % Transform p2phi=pi/2-asin(xx2(3));      % New colatitude of p2dist=60*phi/fac;            % Total distance along route (NM)psi=atan2(xx2(2),xx2(1));   % New longitude of p2% Compute and transform the new pointsclt = dlat:dlat:phi;          % Colatitudes of the new pointslt = pi/2-clt;n=length(lt);   % Latitudes of the new pointsln = psi*ones(1,n);           % Longitudes of the new pointsxx = zeros(3,n);x=xx;         % Cartesians of new pointsxx(1,:) = cos(lt).*cos(ln); xx(2,:) = cos(lt).*sin(ln); xx(3,:) = sin(lt);I1I2(1,:) = [cos(lo1)*sin(la1),-sin(lo1),cos(lo1)*cos(la1)];I1I2(2,:) = [sin(lo1).*sin(la1),cos(lo1),sin(lo1).*cos(la1)];I1I2(3,:) = [-cos(la1),0,sin(la1)];x = I1I2*xx;                  % Reverse transform the new pointslat = asin(x(3,:))/fac;       % Cartesian back to polar (earth system)lon = atan2(x(2,:),x(1,:))/fac;% Convert negative longitudes to degrees east of Greenwichlon = lon + (360*ones(size(lon))).*(lon<0);